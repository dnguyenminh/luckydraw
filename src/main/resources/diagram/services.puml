@startuml Luckydraw Services

' Style settings
skinparam class {
    BackgroundColor white
    ArrowColor #666666
    BorderColor #666666
}

' Services and Components
class RewardSelectionService {
    -Map<String, Set<String>> provinceCache
    +Optional<Reward> selectReward(Event, List<Reward>, long, Optional<GoldenHour>, String)
    -Optional<Reward> trySingleReward(Reward, String, long)
    -boolean isLocationAllowed(Reward, String)
}

class EventLocationService {
    -EventLocationRepository eventLocationRepository
    +List<EventLocation> getActiveLocations(Long)
    +long getRemainingSpins(Long)
    +EventLocation createEventLocation(Event, String, int)
    +Optional<EventLocation> allocateSpin(Long)
    +void addSpins(Long, int)
}

class ParticipantService {
    -ParticipantRepository participantRepository
    -EventLocationService eventLocationService
    +Optional<Participant> register(ParticipantDTO)
    +Optional<Participant> findByEventAndCustomerId(Long, String)
    +boolean canSpin(Participant)
    +void updateSpinCount(Long)
}

class EventService {
    -EventRepository eventRepository
    +Event findActive()
    +Event createEvent(Event)
    +Event updateEvent(Event)
    +void validateEventDates(Event)
}

class RewardService {
    -RewardRepository rewardRepository
    +List<Reward> findByEventAndLocation(Event, String)
    +Reward createReward(Reward)
    +void updateQuantity(Long, int)
    +void validateReward(Reward)
}

class LuckyDrawResultService {
    -LuckyDrawResultRepository resultRepository
    +LuckyDrawResult recordSpin(Participant, Event, Reward)
    +List<LuckyDrawResult> findByParticipant(Participant)
    +List<LuckyDrawResult> findByEvent(Event)
}

class GoldenHourService {
    -GoldenHourRepository goldenHourRepository
    +Optional<GoldenHour> findActive(Event, LocalDateTime)
    +GoldenHour createGoldenHour(GoldenHour)
    +void validateGoldenHour(GoldenHour)
}

interface EventRepository {
    +Optional<Event> findActive()
    +Event save(Event)
}

interface EventLocationRepository {
    +List<EventLocation> findActiveByEventId(Long)
    +Optional<EventLocation> findByIdForUpdate(Long)
    +int decrementRemainingSpins(Long)
    +Long sumRemainingSpinsByEvent(Long)
}

interface ParticipantRepository {
    +Optional<Participant> findByEventAndCustomerId(Long, String)
    +Optional<Participant> findByEventLocationAndCustomerId(Long, String)
    +List<Participant> findByEventLocation(Long)
}

interface RewardRepository {
    +List<Reward> findByEventAndLocation(Event, String)
    +Reward save(Reward)
}

interface LuckyDrawResultRepository {
    +LuckyDrawResult save(LuckyDrawResult)
    +List<LuckyDrawResult> findByParticipant(Participant)
}

interface GoldenHourRepository {
    +Optional<GoldenHour> findActive(Event, LocalDateTime)
    +GoldenHour save(GoldenHour)
}

' Relationships
RewardSelectionService ..> RewardService : uses
RewardSelectionService ..> EventService : uses
RewardSelectionService ..> LuckyDrawResultService : uses
RewardSelectionService ..> GoldenHourService : uses
RewardSelectionService ..> EventLocationService : uses
RewardSelectionService ..> ParticipantService : uses

EventLocationService --> EventLocationRepository : uses
ParticipantService --> ParticipantRepository : uses
ParticipantService ..> EventLocationService : uses
EventService --> EventRepository : uses
RewardService --> RewardRepository : uses
LuckyDrawResultService --> LuckyDrawResultRepository : uses
GoldenHourService --> GoldenHourRepository : uses

@enduml